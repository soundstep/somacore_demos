package com.soma.debugger.wires {	import com.soma.core.interfaces.IWire;	import com.soma.core.wire.Wire;	import com.soma.debugger.SomaDebugger;	import com.soma.debugger.commands.SomaDebuggerGCCommand;	import com.soma.debugger.events.SomaDebuggerGCEvent;	import com.soma.debugger.views.SomaDebuggerGC;	import com.soma.debugger.views.SomaDebuggerView;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.system.System;	import flash.utils.Dictionary;	import flash.utils.Timer;	import flash.utils.setTimeout;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Dec 10, 2009<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class SomaDebuggerGCWire extends Wire implements IWire {				namespace somans = "http://www.soundstep.com/soma";		//------------------------------------		// private, protected properties		//------------------------------------				private var _debuggerName:String;		private var _gcCount:Number;		private var _watchers:Dictionary;		private var _names:Object;		private var _namesCopy:Array;		private var _count:int;		private var _retained:Number = 0;				private var _timer:Timer;		private var _timerGC:Sprite;		//------------------------------------		// public properties		//------------------------------------				public static var NAME:String;				//------------------------------------		// constructor		//------------------------------------				public function SomaDebuggerGCWire(debuggerName:String) {			super(debuggerName+"GCWire");			NAME = debuggerName+"GCWire";			_debuggerName = debuggerName;		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				override protected function initialize():void {			// commands			if (!hasCommand(SomaDebuggerGCEvent.ADD_WATCHER)) addCommand(SomaDebuggerGCEvent.ADD_WATCHER, SomaDebuggerGCCommand);			if (!hasCommand(SomaDebuggerGCEvent.REMOVE_WATCHER)) addCommand(SomaDebuggerGCEvent.REMOVE_WATCHER, SomaDebuggerGCCommand);			if (!hasCommand(SomaDebuggerGCEvent.REMOVE_ALL_WATCHERS)) addCommand(SomaDebuggerGCEvent.REMOVE_ALL_WATCHERS, SomaDebuggerGCCommand);			if (!hasCommand(SomaDebuggerGCEvent.FORCE_GC)) addCommand(SomaDebuggerGCEvent.FORCE_GC, SomaDebuggerGCCommand);			resetWatchers();			// timer			_timerGC = new Sprite();			_timer = new Timer(SomaDebugger.DEFAULT_GC_CHECK_TICK);			_timer.addEventListener(TimerEvent.TIMER, checkDetained);			if (_retained > 0) startTimer();		}				override protected function dispose():void {			// dispose objects, graphics and events listeners			try {				if (!hasCommand(SomaDebuggerGCEvent.ADD_WATCHER)) removeCommand(SomaDebuggerGCEvent.ADD_WATCHER);				if (!hasCommand(SomaDebuggerGCEvent.REMOVE_WATCHER)) removeCommand(SomaDebuggerGCEvent.REMOVE_WATCHER);				if (!hasCommand(SomaDebuggerGCEvent.REMOVE_ALL_WATCHERS)) removeCommand(SomaDebuggerGCEvent.REMOVE_ALL_WATCHERS);				if (!hasCommand(SomaDebuggerGCEvent.FORCE_GC)) removeCommand(SomaDebuggerGCEvent.FORCE_GC);				_timerGC.removeEventListener(Event.ENTER_FRAME, startForceGC);				_timerGC = null;				_timer.removeEventListener(TimerEvent.TIMER, checkDetained);				_timer = null;				_watchers = null;				_names = null;				_namesCopy = null;			} catch(e:Error) {				trace("Error in", this, "(dispose method):", e.message);			}		}		private function resetWatchers():void {			_watchers = new Dictionary(true);			_namesCopy = [];			_names = {};			_count = 0;			_retained = 0;			stopTimer();			updateView();		}				private function get debuggerView():SomaDebuggerView {			return getView(_debuggerName+"View") as SomaDebuggerView;		}				private function get gcView():SomaDebuggerGC {			if (debuggerView == null) return null;			return debuggerView.somans::gc;		}				private function updateView():void {			if (gcView != null) gcView.updateWatchers(_retained, _count);			if (debuggerView != null) debuggerView.somans::printGCReport(_watchers, _names, _namesCopy, _count, _retained);		}				private function startTimer():void {			if (_timer == null) return;			if (!_timer.running) {				_timer.start();				checkDetained();			}		}		private function stopTimer():void {			if (_timer == null) return;			_timer.stop();		}				private function checkDetained(e:TimerEvent = null):void {			var temp:Object = {};			for (var obj:Object in _watchers) {				temp[_watchers[obj]] = true;			}			for (var name:String in _names) {				if (!temp[name]) collectedHandler(name);			}		}				private function collectedHandler(name:String):void {			_retained--;			delete _names[name];			if (debuggerView != null) debuggerView.somans::printGCollected(name);			updateView();			if (_retained == 0) stopTimer();		}				private function startForceGC(evt:Event):void {			System.gc();			if(++_gcCount > 1){				_timerGC.removeEventListener(Event.ENTER_FRAME, startForceGC);				setTimeout(lastGC, 40);			}		}				private function lastGC():void{			System.gc();		}						// PUBLIC		//________________________________________________________________________________________________				public function forceGC():void {			_gcCount = 0;			if (!_timerGC.hasEventListener(Event.ENTER_FRAME)) _timerGC.addEventListener(Event.ENTER_FRAME, startForceGC);		}				public function addWatcher(name:String, object:Object):void {			if (!_watchers[object] && !_names[name] && object != null && name != "" && name != null) {				_watchers[object] = name;				_names[name] = true;				_namesCopy.push(name);				_count++;				_retained++;				debuggerView.somans::printAddWatcher(name, object);				updateView();				startTimer();			}		}		public function removeWatcher(name:String):void {			if (_names[name]) {				delete _watchers[name];				for (var obj:Object in _watchers) {					if (_watchers[obj] == name) {						delete _watchers[obj];					}				}				for (var i:int=0; i<_namesCopy.length; ++i) {
					if (_namesCopy[i] == name) {						_namesCopy.splice(i, 1);					}
				}				_count--;				_retained--;				debuggerView.somans::printRemoveWatcher(name);				updateView();				if (_retained == 0) resetWatchers();			}		}				public function removeAllWatchers():void {			resetWatchers();			debuggerView.somans::printClearWatcher();			updateView();		}			}}