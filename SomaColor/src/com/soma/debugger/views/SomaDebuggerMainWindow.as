package com.soma.debugger.views {	import com.soma.debugger.events.SomaDebuggerEvent;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Nov 25, 2009<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class SomaDebuggerMainWindow extends SomaDebuggerWindow {				namespace somans = "http://www.soundstep.com/soma";				//------------------------------------		// private, protected properties		//------------------------------------				private var _stats:SomaDebuggerStats;		private var _gc:SomaDebuggerGC;		private var _clear:Sprite;		private static const STATS_HEIGHT:Number = 15;		private static const GC_HEIGHT:Number = 15;				//------------------------------------		// public properties		//------------------------------------				public static const SELECT_GC_DETAILS:String = "SomaDebuggerWindow::Event.SELECT_GC_DETAILS";				//------------------------------------		// constructor		//------------------------------------				public function SomaDebuggerMainWindow(title:String = "", widthWindow:Number = 100, heightWindow:Number = 100) {			super(title, widthWindow, heightWindow);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				override protected function initialize():void {			super.initialize();			createClearButton();			createStats();			createGC();		}				private function createClearButton():void {			// clear			_clear = new Sprite();			_clear.buttonMode = true;			_clear.mouseChildren = false;			_clear.addEventListener(MouseEvent.CLICK, clearHandler);			var tfClear:TextFormat = new TextFormat("_typewriter", 11);			tfClear.letterSpacing = -1;			var clearLabel:TextField = new TextField();			clearLabel.defaultTextFormat = tfClear;			clearLabel.autoSize = TextFieldAutoSize.LEFT;			clearLabel.text = "clear";			_clear.addChild(clearLabel);			_clear.x = _close.x - _clear.width - 5;			_clear.y = -2;			addChild(_clear);			// update hit area			_hit.width = _widthWindow - (_widthWindow-_clear.x);		}		private function createStats():void {			_stats = new SomaDebuggerStats(_widthWindow-6, STATS_HEIGHT, 0xABABAB);			_stats.x = 3;			_stats.y = 15;			_textfield.y += STATS_HEIGHT+3;			_textfield.height -= STATS_HEIGHT+3;			addChild(_stats);		}		private function createGC():void {			_gc = new SomaDebuggerGC(_widthWindow-6, GC_HEIGHT);			_gc.hit.addEventListener(MouseEvent.CLICK, clickGCDetailsHandler);			_gc.x = 3;			_gc.y = _stats.y + STATS_HEIGHT + 3;			_textfield.y += GC_HEIGHT+3;			_textfield.height -= GC_HEIGHT+3;			addChild(_gc);		}				private function clickGCDetailsHandler(e:MouseEvent):void {
			dispatchEvent(new Event(SELECT_GC_DETAILS));
		}				private function clearHandler(event:MouseEvent):void {			dispatchEvent(new SomaDebuggerEvent(SomaDebuggerEvent.CLEAR, null, SomaDebuggerView(parent).debuggerName));		}		override protected function updateLayout(e:Event = null):void {			x = stage.stageWidth - width;			y = stage.stageHeight - scrollRect.height;		}				// PUBLIC		//________________________________________________________________________________________________				override public function dispose() : void {
			// dispose objects, graphics and events listeners
			try {				super.dispose();				_gc.hit.removeEventListener(MouseEvent.CLICK, clickGCDetailsHandler);				_gc.dispose();				_clear.removeEventListener(MouseEvent.CLICK, clearHandler);				while (numChildren > 0) removeChildAt(0);				_clear = null;				_stats = null;				_gc = null;			} catch(e:Error) {
				trace("Error in", this, "(dispose method):", e.message);
			}
		}				public function get stats():SomaDebuggerStats {			return _stats;		}				public function get gc():SomaDebuggerGC {			return _gc;		}			}}