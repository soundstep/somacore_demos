package com.soundstep.demo.somacore.gc.wires {	import com.soma.core.interfaces.IWire;	import com.soma.core.wire.Wire;	import com.soma.debugger.events.SomaDebuggerGCEvent;	import com.soundstep.demo.somacore.gc.Main;	import com.soundstep.demo.somacore.gc.SomaApplication;	import com.soundstep.demo.somacore.gc.views.ItemView;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Jan 11, 2010<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class ItemWire extends Wire implements IWire {		//------------------------------------		// private, protected properties		//------------------------------------				private var _id:int;		//------------------------------------		// public properties		//------------------------------------				public static var NAME:String = "Wire::ItemWire";		public static var NAME_VIEW:String = "View::ItemView";				//------------------------------------		// constructor		//------------------------------------				public function ItemWire(id:int) {			super(NAME+id);			_id = id;		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				override public function initialize():void {			debug("A item has been created > " + getName());			debug(this);			createView();		}				override public function dispose():void {			main.removeChild(view);			removeView(NAME_VIEW + _id);			dispatchEvent(new SomaDebuggerGCEvent(SomaDebuggerGCEvent.FORCE_GC));		}		private function debug(obj:Object):void {
			SomaApplication(instance).debug(obj);
		}				private function get main():Main {			return SomaApplication(instance).main;		}				private function createView():void {
			addView(NAME_VIEW + _id, new ItemView(_id));			view.x = Math.random() * stage.stageWidth;			view.y = Math.random() * stage.stageHeight;			main.addChild(view);			// register wire to GC watcher			dispatchEvent(new SomaDebuggerGCEvent(SomaDebuggerGCEvent.ADD_WATCHER, getName(), this));			// register view to GC watcher			dispatchEvent(new SomaDebuggerGCEvent(SomaDebuggerGCEvent.ADD_WATCHER, NAME_VIEW+_id, view));		}				// PUBLIC		//________________________________________________________________________________________________				public function get id():int {			return _id;		}				public function get view():ItemView {			return getView(NAME_VIEW + _id) as ItemView;		}	}}