package com.soundstep.demo.somacore.gc {	import com.soma.debugger.events.SomaDebuggerEvent;	import com.soundstep.demo.somacore.gc.commands.ItemCommand;	import com.soundstep.demo.somacore.gc.events.ItemEvent;	import com.soma.core.Soma;	import com.soma.core.interfaces.ISoma;	import com.soma.debugger.SomaDebugger;	import com.soma.debugger.vo.SomaDebuggerVO;	import com.soundstep.demo.somacore.gc.wires.MainWire;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Jan 11, 2010<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class SomaApplication extends Soma implements ISoma {		//------------------------------------		// private, protected properties		//------------------------------------				private var _main:Main;		private var _debugMode:Boolean;		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				public function SomaApplication(main:Main, debugMode:Boolean = false) {			super(main.stage);			_main = main;			_debugMode = debugMode;			if (_debugMode) createDebugger();			MainWire(getWire(MainWire.NAME)).createInfo();		}		//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				private function createDebugger():void {
			var vo:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);			createPlugin(SomaDebugger, vo);
		}				override protected function registerWires():void {			addWire(MainWire.NAME, new MainWire());		}				override protected function registerCommands():void {			addCommand(ItemEvent.CREATE, ItemCommand);			addCommand(ItemEvent.DESTROY, ItemCommand);		}				// PUBLIC		//________________________________________________________________________________________________				public function get main():Main {			return _main;		}				public function debug(obj:Object):void {
			if (_debugMode) dispatchEvent(new SomaDebuggerEvent(SomaDebuggerEvent.PRINT, obj));
		}	}}